apply plugin: 'org.ysb33r.doxygen'
apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'edu.wpi.first.GradleRIO'

apply from: project.file('../config.gradle')
apply from: project.file('../shared/platform.gradle')

ext {
  teamID = teamNum
  link = lib_link
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
  targets {
    roborio(getTargetTypeClass('RoboRIO')) {
      // Team number is loaded either from the .wpilib/wpilib_preferences.json
      // or from command line. If not found an exception will be thrown.
      // You can use getTeamOrDefault(team) instead of getTeamNumber if you
      // want to store a team number in this file.
      team = teamNum

      
      artifacts {
        frcCpp(getArtifactTypeClass('FRCNativeArtifact')) { // <- wtf is this WPI
        }

        frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
          files = project.fileTree('src/main/deploy')
          directory = '/home/lvuser/deploy'
        }
      }
    }
  }

}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()


model {
  components {
    
    "${nativeName}"(NativeExecutableSpec) { // frc user
      targetPlatform wpi.platforms.roborio
      if (includeDesktopSupport) {
        targetPlatform wpi.platforms.desktop
      }

      sources.cpp {
        source {
          srcDir 'src/main/cpp' // robot
          include '**/*.cpp', '**/*.cc'
        }

        exportedHeaders {
          srcDir 'src/main/include' // robot
        }
      }

      binaries.all {
        if (req_proj_libs.size() >= 1) {
          req_proj_libs.each { req_library ->
            if (targetPlatform.name == wpi.platforms.roborio) {
              lib project: ":${req_library}", library: "${req_library}", linkage: "shared"
            } else {
              lib project: ":${req_library}", library: "${req_library}", linkage: "${lib_link}"
            }
          }
        }

        if (req_libs.size() >= 1) {
          req_libs.each { req_library ->
            lib library: "${req_library}"
          }
        }

        // if (includeDesktopSupport) {
        //   cppCompiler.define "WML_DESKTOP_SUPPORT"
        // }
      }

      // Specify this component for deploying.
      deployArtifact.component = it

      // Enable run tasks for this component
      wpi.cpp.enableExternalTasks(it)

      // Enable simulation for this component
      wpi.sim.enable(it)
      // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
      wpi.cpp.vendor.cpp(it)
      wpi.cpp.deps.wpilib(it)
    }
  }

  testSuites {
    "${nativeName}Test"(GoogleTestTestSuiteSpec) {
      for(NativeComponentSpec c : $.components) {
        if (c.name == nativeName) {
          testing c
          break
        }
      }

      sources.cpp {
        source {
          srcDir 'src/test/cpp'
          include '**/*.cpp'
        }
      }

      binaries.all {
        if (req_proj_libs.size() >= 1) {
          req_proj_libs.each { req_library ->
            lib project: ":${req_library}", library: "${req_library}", linkage: "${lib_link}"
          }
        }

        if (req_libs.size() >= 1) {
          req_libs.each { req_library ->
            lib library: "${req_library}"
          }
        }

        // if (includeDesktopSupport) {
        //   cppCompiler.define "WML_DESKTOP_SUPPORT"
        // }
      }

      // Enable run tasks for this component
      wpi.cpp.enableExternalTasks(it)

      wpi.cpp.vendor.cpp(it)
      wpi.cpp.deps.wpilib(it)
      wpi.cpp.deps.googleTest(it)
    }
  }
}

task sim(dependsOn: "simulate${nativeName}${wpi.platforms.desktop.capitalize()}DebugExecutable")

doxygen {
  executables {
    doxygen version : '1.8.13'
  }

  generate_html true
  source project.file('src/main/include')
  outputDir new File(buildDir,"docs/${nativeName}/doxygen")
}